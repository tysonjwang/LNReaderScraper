{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww28140\viewh7660\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Project Description: \
LNReader is a program that assists the reading of Chinese Webnovels. Instead of being a translation service, it expects a basic understanding of Chinese grammar by the reader, and lets the user search highlight words to search them up.\
\
Competitive Analysis: two programs which have similar functionality are Pleco\'92s document reader and Chinese Text analyzer. Pleco is a mobile app that allows the user to tap phrases for similar functionality, Chinese Text Analyzer is for the desktop. The key difference between them and LNReader is that LNReader pulls definitions from an online dictionary (zdict), which is far more comprehensive than most offline dictionaries that the aforementioned two use. The integration with this online dictionary will be within the app, and won\'92t need to open a new window in a browser. Furthermore, the program will also be able to interface directly with webnovel websites, removing the need for the user to look for the texts of the web novel themselves.\
\
Plan: \
1. Use PySide2 to create the UI for the user\
2. Use requests and lxml to parse the web novels and display them in the application\
3. Also use requests and lxml to look for the definitions of different words online\
4. Also use PySide2 to create pop-ups for the definitions of words.\
\
Each one of these four modules will most likely be in separate files, with a main script importing the relevant functions\
\
Because PySide2 handles most of the UI stuff, the button, cursor, text, etc are handled within PySide2. However, a new \'93document\'94 class may be needed along with \'93word\'94 and \'93character\'94 classes in order fo facilitate faster lookup. Previously looked up words might also be stored in a json file to expedite looking up words.\
\
The hardest part of this project algorithmically will probably be the (planned) implementation of asynchronous multiprocessing during the process of scraping web novels. This feature is important because it would let novels to be downloaded much quicker, as downloading them one at a time is a time-consuming process, especially for novels with over 3,000 chapters. To solve this, I plan to use asynchio to create multiple worker processes in order to download chapters multiple at a time.\
\
Timeline: \
TP1: \
- Have enter chapter scraping implemented\
- Have chapter navigation implemented\
- Have table of contents implemented\
- Have ZDic lookup implemented\
\
TP2: \
- Have all of the basic functionality implemented into a main program that can be run from the\
application.\
- \
\
Version Control Plan: \
I use GitHub to back up all of my code\
\
Module List:\
- PySide2\
- lxml\
- requests\
\
A crude implementation of the novel navigation system is in qt_demo.py\
The scraping of novels is in scrape_and_convert.py\
The dictionary lookup is in zdic_lookup.py\
An implementation of flashcards is in flashcards.py\
\
\
UPDATE FOR TP2:\
\
Much of the project goals remain the same, however additional desired features to improve user experience are listed below:\
\
- Progress bar for seeing for downloading/scraping novels\
- Progress bar when reading the novel itself\
- Input novel name instead of novel URL\
- Better looking flashcards\
- Some way to view all flashcards without going into the command prompt\
- Get Flashcard Analytics\
\
The main Qt Loop is is now in main.py, with the class Window defining the entire application, and initUI creating the UI, with the other functions mainly controlling what the buttons do\
The scraping of novels is in scrape_and_convert.py\
The dictionary lookup is in zdic_lookup.py\
An updated implementation of flashcards is in flashcards.py\
}